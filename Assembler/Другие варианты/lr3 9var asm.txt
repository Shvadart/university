.386
.MODEL FLAT
.DATA
BUF  dd ? ; указатель на исходную строку 
BUF2 dd ? ; указатель на символ
NLEN dd ? ; длина подстроки
SYM DD ? ; тут храним символ на который меняем числа

.CODE
@find_num@12 PROC ; соглашение fastcall
PUSH EBP ; заносим ebp в стек
MOV EBP, ESP

;т.к. fastcall, то значения передаются через ecx и edx, остальные аргументы через стек(nlen = [ebp] + 8)
MOV BUF,EDX ; указатель на исходную строку
MOV BUF2,ECX ; указатель на символ
MOV EAX, [EBP]+8
MOV NLEN, EAX ; длина подстроки

CLD ; DF = 0, идем в прямом направлении

MOV ESI, BUF
LODSB [ESI] ; из цепочки buf помещаем элемент в eax (lods работает только с esi, с edi не работает)
MOV SYM, EAX ; символ на который меняем числа
MOV ECX, NLEN ; в счетчик длина строки
MOV ESI, BUF2 ; в esi указатель на введенную строку
MOV EDI, BUF ; в edi указатель на новую строку, где цифры=введённый символ
START:
	
	LODSB [ESI] ; загружаем в eax символ из введенной строки
	STOSB [EDI] ; копируем этот символ в новую строку (stoss работает только с edi, с esi не работает)
	; смотрим этот символ число или нет
	CMP EAX, 47 ; 48 - ascii код 0, 57 - 9
	JA NEXT
	JMP EXIT
	NEXT:
	CMP EAX, 58
	JAE EXIT
	MOV EAX, SYM ; если число, то меняем на введенный элемент
	DEC EDI
	STOSB [EDI]
	EXIT:
LOOP START ; цикл работает пока счётчик ecx > 0

POP EBP ; возвращаем значение из стека
RET 4 ; возврат в место вызова функции, аргумент 4, т.к. через стек 1 аргумент передан
@find_num@12 ENDP
END
